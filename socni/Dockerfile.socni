# Build stage
FROM rust:1.73-slim-bookworm as builder

WORKDIR /workspace

# Install build dependencies
RUN apt-get update && \
    apt-get install -y pkg-config libssl-dev build-essential git && \
    rm -rf /var/lib/apt/lists/*

# Copy Cargo.toml and Cargo.lock first for better caching
COPY socni/Cargo.toml socni/Cargo.lock* ./

# Create a dummy src directory with minimal content to cache dependencies
RUN mkdir src && \
    echo "fn main() {println!(\"dummy\");}" > src/lib.rs && \
    echo "fn main() {println!(\"dummy\");}" > src/bin/vlan-cni.rs && \
    echo "fn main() {println!(\"dummy\");}" > src/bin/socni-ctl/main.rs && \
    mkdir -p src/config src/plugin src/types src/commands && \
    touch src/config/mod.rs src/plugin/mod.rs src/types/mod.rs src/commands/mod.rs

# Build dependencies only
RUN cargo build --release

# Remove the dummy source files
RUN rm -rf src

# Copy the actual source code
COPY socni/src ./src

# Build the actual binaries
RUN cargo build --release

# Final stage
FROM debian:bookworm-slim

WORKDIR /

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y iproute2 bash sudo && \
    rm -rf /var/lib/apt/lists/*

# Create necessary directories
RUN mkdir -p /opt/cni/bin /etc/cni/net.d

# Copy binaries from builder stage
COPY --from=builder /workspace/target/release/vlan-cni /opt/cni/bin/vlan
COPY --from=builder /workspace/target/release/socni-ctl /usr/local/bin/socni-ctl

# Make binaries executable
RUN chmod +x /opt/cni/bin/vlan /usr/local/bin/socni-ctl

# Copy installation script
COPY socni/scripts/install.sh /install.sh
RUN chmod +x /install.sh

# By default, show usage information
ENTRYPOINT ["/bin/bash", "-c"]
CMD ["echo 'VLAN CNI Plugin Container'; echo ''; echo 'Available commands:'; echo '  - /install.sh                 # Run the installation script'; echo '  - /opt/cni/bin/vlan          # Run the CNI plugin directly'; echo '  - socni-ctl --help          # Show CLI tool help'"]